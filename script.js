// Modern JavaScript for enhanced user experience
document.addEventListener('DOMContentLoaded', function() {
    // Add scrolled class to header on scroll
    const header = document.querySelector('.header');

    window.addEventListener('scroll', () => {
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });

    // Smooth scroll for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = header.offsetHeight;
                const targetPosition = target.offsetTop - headerHeight;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Initialize chatbot after DOM is loaded
    initializeChatbot();
});

// Initialize chatbot functionality
function initializeChatbot() {
    const chatbotInput = document.getElementById('chatbot-input-field');
    if (chatbotInput) {
        chatbotInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Focus input when chatbot opens
        const chatbotButton = document.querySelector('.chatbot-button');
        if (chatbotButton) {
            chatbotButton.addEventListener('click', () => {
                setTimeout(() => {
                    const container = document.getElementById('chatbot-container');
                    if (container && container.classList.contains('active')) {
                        chatbotInput.focus();
                    }
                }, 300);
            });
        }
    }
}

// Mobile menu toggle (for future mobile menu implementation)
const createMobileMenu = () => {
    const navbar = document.querySelector('.navbar');
    const mobileToggle = document.createElement('button');
    mobileToggle.className = 'mobile-toggle';
    mobileToggle.innerHTML = '<i class="fas fa-bars"></i>';

    // Insert mobile toggle before navbar
    navbar.parentNode.insertBefore(mobileToggle, navbar);

    mobileToggle.addEventListener('click', () => {
        navbar.classList.toggle('mobile-active');
        const icon = mobileToggle.querySelector('i');
        if (navbar.classList.contains('mobile-active')) {
            icon.className = 'fas fa-times';
        } else {
            icon.className = 'fas fa-bars';
        }
    });
};

// Form submission handler - Envio para WhatsApp
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.hero-form form');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            // Get form data
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);

            // Simple validation
            const requiredFields = ['nome', 'email', 'telefone', 'servico'];
            let isValid = true;

            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                if (!data[field] || data[field].trim() === '') {
                    input.style.borderColor = '#e74c3c';
                    isValid = false;
                } else {
                    input.style.borderColor = '#e0e0e0';
                }
            });

            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const emailInput = document.getElementById('email');
            if (data.email && !emailRegex.test(data.email)) {
                emailInput.style.borderColor = '#e74c3c';
                isValid = false;
            }

            if (isValid) {
                // Show loading state
                const button = this.querySelector('.btn');
                const originalText = button.textContent;
                button.textContent = 'Enviando...';
                button.disabled = true;

                // Create WhatsApp message
                const whatsappMessage = createWhatsAppMessage(data);

                // Send to WhatsApp
                sendToWhatsApp(whatsappMessage);

                // Reset form after a delay
                setTimeout(() => {
                    alert('Redirecionando para WhatsApp...');
                    this.reset();
                    button.textContent = originalText;
                    button.disabled = false;
                }, 1000);
            } else {
                alert('Por favor, preencha todos os campos obrigat√≥rios corretamente.');
            }
        });
    }
});

// Function to create WhatsApp message from form data
function createWhatsAppMessage(data) {
    let message = `*üìã NOVA SOLICITA√á√ÉO DE CONSULTA*\n\n`;
    message += `üë§ *Nome:* ${data.nome}\n`;
    message += `üìß *E-mail:* ${data.email}\n`;
    message += `üì± *Telefone:* ${data.telefone}\n`;

    if (data.empresa && data.empresa.trim()) {
        message += `üè¢ *Empresa:* ${data.empresa}\n`;
    }

    message += `‚öñÔ∏è *Servi√ßo de Interesse:* ${data.servico}\n`;

    if (data.mensagem && data.mensagem.trim()) {
        message += `üí¨ *Mensagem:* ${data.mensagem}\n`;
    }

    message += `\nüìÖ *Data:* ${new Date().toLocaleDateString('pt-BR')}\n`;
    message += `üïê *Hor√°rio:* ${new Date().toLocaleTimeString('pt-BR')}`;

    return message;
}

// Function to send message to WhatsApp
function sendToWhatsApp(message) {
    const whatsappNumber = '5519998630306'; // WhatsApp number from the website
    const encodedMessage = encodeURIComponent(message);
    const whatsappURL = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;

    // Open WhatsApp in new tab
    window.open(whatsappURL, '_blank');
}

// Animate elements on scroll
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe service cards and benefit items
document.addEventListener('DOMContentLoaded', () => {
    const animateElements = document.querySelectorAll('.service-card, .benefit-item, .contact-item');

    animateElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });

    // Initialize mobile menu for smaller screens
    if (window.innerWidth <= 768) {
        createMobileMenu();
    }

    // Add resize listener for mobile menu
    window.addEventListener('resize', () => {
        const existingToggle = document.querySelector('.mobile-toggle');
        if (window.innerWidth <= 768 && !existingToggle) {
            createMobileMenu();
        } else if (window.innerWidth > 768 && existingToggle) {
            existingToggle.remove();
            document.querySelector('.navbar').classList.remove('mobile-active');
        }
    });
});


// Add hover effects to service cards
document.querySelectorAll('.service-card').forEach(card => {
    card.addEventListener('mouseenter', function() {
        this.style.borderTopColor = '#e74c3c';
    });

    card.addEventListener('mouseleave', function() {
        this.style.borderTopColor = '#3498db';
    });
});


// Chatbot functionality
function toggleChatbot() {
    const container = document.getElementById('chatbot-container');
    container.classList.toggle('active');
}

function handleChatInput(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

async function sendMessage() {
    const inputField = document.getElementById('chatbot-input-field');
    const message = inputField.value.trim();

    if (!message) return;

    // Disable input while processing
    inputField.disabled = true;
    const sendButton = inputField.nextElementSibling;
    sendButton.disabled = true;

    // Add user message
    addMessage(message, 'user');
    inputField.value = '';

    // Show typing indicator
    showTypingIndicator();

    // Get bot response (async)
    try {
        const botResponse = await getBotResponse(message);
        hideTypingIndicator();
        addMessage(botResponse, 'bot');
    } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        hideTypingIndicator();
        addMessage('Desculpe, houve um erro. Tente novamente em instantes.', 'bot');
    } finally {
        // Re-enable input
        inputField.disabled = false;
        sendButton.disabled = false;
        inputField.focus();
    }
}

function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatbot-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;

    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';

    // Handle line breaks and formatting
    const formattedText = text.replace(/\n/g, '<br>');
    messageContent.innerHTML = formattedText;

    messageDiv.appendChild(messageContent);
    messagesContainer.appendChild(messageDiv);

    // Smooth scroll to bottom
    setTimeout(() => {
        messagesContainer.scrollTo({
            top: messagesContainer.scrollHeight,
            behavior: 'smooth'
        });
    }, 100);
}

// Chatbot with Advanced AI Integration
const CHATBOT_CONFIG = {
    // Configura√ß√£o da IA (substitua pela sua chave real)
    OPENAI_API_KEY: 'sk-YOUR_OPENAI_KEY_HERE', // Substitua pela sua chave
    OPENAI_API_URL: 'https://api.openai.com/v1/chat/completions',
    USE_AI: false, // Mude para true quando tiver a chave da OpenAI

    // Context do escrit√≥rio para IA - SISTEMA RIGOROSO ANTI-DESVIO
    SYSTEM_CONTEXT: `Voc√™ √© Clara, assistente virtual EXCLUSIVAMENTE do escrit√≥rio de advocacia trabalhista Martins Palmeira e Bergamo.

‚öñÔ∏è FOCO OBRIGAT√ìRIO: APENAS DIREITO TRABALHISTA EMPRESARIAL

INFORMA√á√ïES DO ESCRIT√ìRIO:
- Especializa√ß√£o: EXCLUSIVAMENTE Direito Trabalhista Empresarial
- Localiza√ß√£o: Swiss Park Office - Av. Antonio Artioli, 570, Sala 108, Campinas-SP
- WhatsApp: (19) 99863-0306
- Email: contato@martinspalmeiraebergamo.com.br
- Hor√°rio: Seg-Sex: 9h-18h + Plant√£o WhatsApp 24h
- Experi√™ncia: 15+ anos, 500+ processos trabalhistas, 200+ empresas

SERVI√áOS ESPECIALIZADOS:
1. Defesa de Reclama√ß√µes Trabalhistas (audi√™ncias, recursos, acordos)
2. Consultoria Trabalhista Empresarial (contratos, pol√≠ticas, compliance)
3. Preven√ß√£o de Passivos Trabalhistas (auditoria, due diligence)

REGRAS R√çGIDAS - NUNCA VIOLE:
üö® RESPONDA APENAS sobre: direito do trabalho, CLT, processos trabalhistas, rela√ß√µes trabalhistas, contratos de trabalho, demiss√µes, direitos trabalhistas, passivos trabalhistas, Justi√ßa do Trabalho
üö® JAMAIS responda sobre: direito civil, criminal, fam√≠lia, consumidor, tribut√°rio, administrativo, outros tipos de direito
üö® Se perguntarem sobre outros assuntos: "Sou especializada exclusivamente em direito trabalhista empresarial. Para outras quest√µes jur√≠dicas, recomendo contatar um escrit√≥rio generalista. Posso ajud√°-lo com quest√µes trabalhistas?"
üö® N√£o forne√ßa consultoria espec√≠fica - sempre direcione para consulta
üö® Seja t√©cnica mas acess√≠vel
üö® M√°ximo 3 frases por resposta
üö® Sempre ofere√ßa contato: WhatsApp (19) 99863-0306`
};

// SISTEMA DE VALIDA√á√ÉO MELHORADO - MAIS FLEX√çVEL PARA SAUDA√á√ïES E D√öVIDAS
function isLaborLawTopic(message) {
    const laborKeywords = [
        // Termos diretos de direito trabalhista
        'trabalhista', 'trabalho', 'clt', 'empregado', 'empregador', 'funcion√°rio', 'colaborador',
        'demiss√£o', 'demitir', 'rescis√£o', 'aviso pr√©vio', 'fgts', 'inss', 'd√©cimo terceiro',
        'f√©rias', 'sal√°rio', 'hora extra', 'adicional', 'insalubridade', 'periculosidade',
        'reclamat√≥ria', 'processo trabalhista', 'justi√ßa do trabalho', 'audi√™ncia',
        'acordo trabalhista', 'passivo trabalhista', 'auditoria trabalhista',
        'contrato de trabalho', 'carteira assinada', 'registro', 'ponto eletr√¥nico',
        'folha de pagamento', 'benef√≠cios', 'vale transporte', 'vale refei√ß√£o',
        'estabilidade', 'gestante', 'acidente trabalho', 'sindicato', 'conven√ß√£o coletiva',
        // Termos do escrit√≥rio
        'martins palmeira', 'bergamo', 'advocacia', 'advogado', 'escrit√≥rio',
        'consulta', 'servi√ßos', 'contrato', 'whatsapp', 'telefone', 'contato'
    ];

    const nonLaborKeywords = [
        // Direito Civil - APENAS termos muito espec√≠ficos
        'div√≥rcio', 'separa√ß√£o conjugal', 'pens√£o aliment√≠cia', 'guarda filhos', 'invent√°rio', 'heran√ßa',
        'usucapi√£o', 'loca√ß√£o residencial', 'compra e venda im√≥vel',
        // Direito Criminal - APENAS crimes espec√≠ficos
        'homic√≠dio', 'roubo', 'furto', 'tr√°fico', 'pris√£o', 'delegacia', 'boletim ocorr√™ncia',
        // Direito do Consumidor - APENAS termos espec√≠ficos
        'procon', 'produto defeituoso', 'devolu√ß√£o produto',
        // Direito Tribut√°rio - APENAS impostos espec√≠ficos
        'imposto de renda', 'receita federal',
        // Tr√¢nsito - APENAS multas
        'multa tr√¢nsito', 'cnh', 'detran'
    ];

    const messageLower = message.toLowerCase().trim();

    // SAUDA√á√ïES E PERGUNTAS GERAIS - SEMPRE ACEITAR
    const basicGreetings = /^(ol[a√°]|oi|hello|hey|e a[i√≠]|blz|tudo bem|bom dia|boa tarde|boa noite)[\s\!]*$/i.test(messageLower);
    const basicQuestions = /\b(como|onde|quando|quanto|que|qual|quem|por que|porque|o que|ajuda|ajudar|info|informa[√ßc][√£a]o|d√∫vida|d[u√∫]vida|pergunta)\b/i.test(messageLower);
    const serviceQuestions = /\b(servi[√ßc]os?|atua[√ßc][√£a]o|especialidade|fazem|trabalham|oferecem|atendimento)\b/i.test(messageLower);
    const contactQuestions = /\b(contato|telefone|whatsapp|falar|ligar|email|endere[√ßc]o|localiza[√ßc][√£a]o|fica)\b/i.test(messageLower);

    // Se √© sauda√ß√£o b√°sica ou pergunta geral, sempre aceitar
    if (basicGreetings || basicQuestions || serviceQuestions || contactQuestions) {
        return true;
    }

    // Se cont√©m palavras explicitamente proibidas, rejeitar
    const hasNonLaborKeywords = nonLaborKeywords.some(keyword =>
        messageLower.includes(keyword)
    );

    if (hasNonLaborKeywords) return false;

    // Se cont√©m palavras trabalhistas espec√≠ficas, aceitar
    const hasLaborKeywords = laborKeywords.some(keyword =>
        messageLower.includes(keyword)
    );

    if (hasLaborKeywords) return true;

    // Para mensagens muito curtas (at√© 3 palavras), aceitar (provavelmente sauda√ß√µes)
    if (messageLower.split(' ').length <= 3) return true;

    // Para outras mensagens, aceitar por padr√£o (ser√£o redirecionadas se necess√°rio)
    return true;
}

// Fun√ß√£o principal para obter resposta do bot - SIMPLIFICADA E SEGURA
async function getBotResponse(userMessage) {
    try {
        console.log('Mensagem recebida:', userMessage);

        // Pequeno delay para simular digita√ß√£o
        await new Promise(resolve => setTimeout(resolve, 300));

        // SEMPRE usar respostas locais (mais seguro)
        const response = getBotResponseLocal(userMessage);

        console.log('Resposta gerada:', response);
        return response;

    } catch (error) {
        console.error('Erro no chatbot:', error);
        // Resposta de erro mais amig√°vel
        return 'Oi! Tive um probleminha t√©cnico, mas estou aqui para ajudar! Pode repetir sua pergunta ou entrar em contato pelo WhatsApp (19) 99863-0306.';
    }
}

// Integra√ß√£o com OpenAI GPT
async function getBotResponseAI(userMessage) {
    try {
        const response = await fetch(CHATBOT_CONFIG.OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${CHATBOT_CONFIG.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: "gpt-3.5-turbo",
                messages: [
                    {
                        role: "system",
                        content: CHATBOT_CONFIG.SYSTEM_CONTEXT
                    },
                    {
                        role: "user",
                        content: userMessage
                    }
                ],
                max_tokens: 200,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            })
        });

        if (!response.ok) {
            throw new Error('Erro na API da OpenAI');
        }

        const data = await response.json();
        return data.choices[0].message.content.trim();
    } catch (error) {
        console.error('Erro na OpenAI:', error);
        return getBotResponseLocal(userMessage); // Fallback para respostas locais
    }
}

// VERS√ÉO NOVA E SIMPLIFICADA - GARANTIA DE FUNCIONAMENTO
function getBotResponseLocal(userMessage) {
    const message = userMessage.toLowerCase().trim();
    console.log('Processando mensagem:', message);

    // Sauda√ß√µes - PRIMEIRA PRIORIDADE
    if (message.includes('ola') || message.includes('ol√°') || message.includes('oi') ||
        message.includes('bom dia') || message.includes('boa tarde') || message.includes('boa noite') ||
        message.includes('hello') || message.includes('hey')) {
        const greetings = [
            'Ol√°! Sou Clara, assistente do escrit√≥rio Martins Palmeira e Bergamo. Como posso ajud√°-lo com quest√µes trabalhistas?',
            'Oi! Somos especialistas em direito trabalhista. Pode me contar sua d√∫vida que vou orient√°-lo!',
            'Ol√°! Tem alguma d√∫vida trabalhista? Estou aqui para ajudar com direitos do trabalho e processos.',
            'Oi! Sou Clara do escrit√≥rio trabalhista Martins Palmeira e Bergamo. Como posso ajud√°-lo hoje?'
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    // Perguntas sobre saber/conhecer/d√∫vidas
    if (message.includes('gostaria de saber') || message.includes('quero saber') ||
        message.includes('duvida') || message.includes('d√∫vida') || message.includes('pergunta') ||
        message.includes('me tire') || message.includes('esclare√ßa') || message.includes('explique')) {
        return 'Claro! Estou aqui para esclarecer d√∫vidas sobre direito trabalhista. Pode perguntar sobre processos, direitos do trabalho, demiss√µes, ou nossos servi√ßos. O que voc√™ gostaria de saber?';
    }

    // Perguntas sobre ajuda
    if (message.includes('ajuda') || message.includes('ajudar') || message.includes('me ajude') ||
        message.includes('preciso de') || message.includes('como voc√™') || message.includes('pode')) {
        return 'Claro! Posso ajud√°-lo com quest√µes trabalhistas: processos, direitos do trabalho, demiss√µes, consultoria empresarial. Qual sua d√∫vida espec√≠fica?';
    }

    // Servi√ßos
    if (message.includes('servi√ßo') || message.includes('fazem') || message.includes('trabalham') ||
        message.includes('especialidade') || message.includes('oferecem')) {
        return 'Nossos servi√ßos trabalhistas:\n\nüõ°Ô∏è DEFESA em processos trabalhistas\nüìã CONSULTORIA para empresas\n‚öñÔ∏è PREVEN√á√ÉO de problemas trabalhistas\n\nSobre qual voc√™ quer saber mais?';
    }

    // Contato
    if (message.includes('contato') || message.includes('telefone') || message.includes('whatsapp') ||
        message.includes('email') || message.includes('falar') || message.includes('ligar')) {
        return 'Entre em contato conosco:\nüì± WhatsApp: (19) 99863-0306\nüìß Email: contato@martinspalmeiraebergamo.com.br\nüïê Seg-Sex: 9h-18h + Plant√£o 24h\nüìç Campinas-SP';
    }

    // Localiza√ß√£o
    if (message.includes('onde') || message.includes('endere√ßo') || message.includes('localiza√ß√£o') ||
        message.includes('fica') || message.includes('campinas')) {
        return 'Nosso escrit√≥rio fica em Campinas-SP:\nüìç Swiss Park Office\nüìç Av. Antonio Artioli, 570\nüìç Edif√≠cio Locarno - Sala 108\nüÖøÔ∏è Estacionamento pr√≥prio';
    }

    // Hor√°rios
    if (message.includes('hor√°rio') || message.includes('que horas') || message.includes('funciona') ||
        message.includes('aberto') || message.includes('atende')) {
        return 'Nosso hor√°rio: Segunda a Sexta das 9h √†s 18h, mas temos plant√£o 24h pelo WhatsApp (19) 99863-0306 para emerg√™ncias trabalhistas!';
    }

    // Pre√ßos
    if (message.includes('pre√ßo') || message.includes('valor') || message.includes('quanto') ||
        message.includes('custo') || message.includes('honor√°rio') || message.includes('cobram')) {
        return 'Nossos valores variam conforme a complexidade do caso. Oferecemos consulta inicial para avalia√ß√£o e or√ßamento personalizado. Entre em contato pelo WhatsApp (19) 99863-0306!';
    }

    // Agradecimentos
    if (message.includes('obrigad') || message.includes('valeu') || message.includes('agrade√ßo') ||
        message.includes('muito bom') || message.includes('√≥timo') || message.includes('perfeito')) {
        return 'Fico feliz em ajudar! Tem mais alguma d√∫vida sobre direito trabalhista? Estou aqui para orient√°-lo!';
    }

    // Resposta padr√£o para qualquer outra mensagem
    return 'Entendi sua pergunta! Para uma orienta√ß√£o espec√≠fica sobre sua situa√ß√£o trabalhista, recomendo falar diretamente com nossos advogados pelo WhatsApp (19) 99863-0306. Assim podemos analisar seu caso detalhadamente!';
}

// Fun√ß√£o auxiliar para respostas aleat√≥rias - COM VALIDA√á√ÉO
function getRandomResponse(responses) {
    if (!responses || !Array.isArray(responses) || responses.length === 0) {
        console.error('Erro: Array de respostas inv√°lido', responses);
        return 'Ol√°! Como posso ajud√°-lo com quest√µes trabalhistas?';
    }

    const randomIndex = Math.floor(Math.random() * responses.length);
    const selectedResponse = responses[randomIndex];
    console.log('Resposta selecionada:', selectedResponse);
    return selectedResponse;
}

// Indicadores visuais melhorados
function showTypingIndicator() {
    // Remove indicador existente se houver
    hideTypingIndicator();

    const messagesContainer = document.getElementById('chatbot-messages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message typing-indicator';
    typingDiv.id = 'typing-indicator';
    typingDiv.innerHTML = `
        <div class="message-content">
            <span class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </span>
            Clara est√° digitando...
        </div>
    `;
    messagesContainer.appendChild(typingDiv);

    // Smooth scroll
    setTimeout(() => {
        messagesContainer.scrollTo({
            top: messagesContainer.scrollHeight,
            behavior: 'smooth'
        });
    }, 100);
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}